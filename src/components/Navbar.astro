---
import UserIcon from "./icons/User.astro";
import BriefcaseIcon from "./icons/Briefcase.astro";
// import CodeIcon from "./icons/Code.astro";
import MailIcon from "./icons/Mail.astro";
import GithubIcon from "./icons/Github.astro";
import LinkedinIcon from "./icons/Linkedin.astro";
import LionHeadIcon from "./icons/LionHead.astro";
import HamburgerIcon from "./icons/Hamburger.astro";
import CloseIcon from "./icons/Close.astro";

import Route from "./navbar/Route.astro";
import type { RouteDTO } from "../types/RouteDTO";

const ROUTES: RouteDTO[] = [
  { path: "/#home", label: "home", icon: LionHeadIcon },
  { path: "/#about-me", label: "about-me", icon: UserIcon },
  { path: "/#experience", label: "experience", icon: BriefcaseIcon },
  // { path: "/#jobs", label: "jobs", icon: CodeIcon },
  { path: "/#contact", label: "contact", icon: MailIcon },
];
const CONTACT_ROUTES: RouteDTO[] = [
  {
    path: "https://github.com/lcasass3",
    label: "github",
    icon: GithubIcon,
    targetBlank: true,
  },
  {
    path: "https://www.linkedin.com/in/leon-casas-187504266/",
    label: "linkedIn",
    icon: LinkedinIcon,
    targetBlank: true,
  },
];
---

<!-- Mobile hamburger button -->
<button
  id="mobile-menu-toggle"
  class="bg-background text-text hover:text-primary fixed top-3 left-3 z-50 block rounded-md p-1.5 shadow-md md:hidden"
  aria-label="Toggle menu"
>
  <HamburgerIcon class="size-5 sm:size-6" />
</button>

<!-- Mobile navigation overlay -->
<div
  id="nav-overlay"
  class="bg-background/70 fixed inset-0 z-40 hidden backdrop-blur-sm transition-all duration-300 ease-in-out"
>
</div>

<!-- Navigation sidebar -->
<nav
  id="main-nav"
  class="border-r-primary/80 bg-background fixed left-0 z-50 flex h-full w-56 -translate-x-full flex-col justify-between border-r py-12 transition-transform duration-300 ease-in-out sm:w-60 md:w-20 md:translate-x-0 md:py-16"
>
  <button
    id="mobile-menu-close"
    class="text-text hover:text-primary absolute top-3 right-3 md:hidden"
    aria-label="Close menu"
  >
    <CloseIcon class="size-5" />
  </button>

  <ul class="grid w-full gap-y-6 pl-4 md:justify-center md:gap-y-12 md:pl-0">
    {ROUTES.map((route) => <Route route={route} />)}
  </ul>

  <ul
    class="grid w-full gap-y-6 pb-4 pl-4 md:justify-center md:gap-y-10 md:pb-4 md:pl-0"
  >
    {CONTACT_ROUTES.map((route) => <Route route={route} />)}
  </ul>
</nav>

<script>
  // Routes highlighting
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("nav ul li a");
    const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
    const mobileMenuClose = document.getElementById("mobile-menu-close");
    const mainNav = document.getElementById("main-nav");
    const navOverlay = document.getElementById("nav-overlay");

    // Mobile menu toggle functionality
    const toggleMobileMenu = () => {
      mainNav?.classList.toggle("-translate-x-full");
      navOverlay?.classList.toggle("hidden");
      document.body.classList.toggle("overflow-hidden");
    };

    mobileMenuToggle?.addEventListener("click", toggleMobileMenu);
    mobileMenuClose?.addEventListener("click", toggleMobileMenu);
    navOverlay?.addEventListener("click", toggleMobileMenu);

    // Close menu when clicking on a nav item on mobile
    navItems.forEach((item) => {
      item.addEventListener("click", () => {
        if (window.innerWidth < 768) {
          // md breakpoint
          toggleMobileMenu();
        }
      });
    });

    // Section highlighting
    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.querySelector("svg")!.classList.remove("text-text");
              item.querySelector("svg")!.classList.add("text-primary");
            } else {
              item.querySelector("svg")!.classList.remove("text-primary");
              item.querySelector("svg")!.classList.add("text-text");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });
    sections.forEach((section) => {
      observer.observe(section);
    });

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>
