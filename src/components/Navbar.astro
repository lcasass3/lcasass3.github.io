---
import UserIcon from "./icons/User.astro";
import BriefcaseIcon from "./icons/Briefcase.astro";
// import CodeIcon from "./icons/Code.astro";
import MailIcon from "./icons/Mail.astro";
import GithubIcon from "./icons/Github.astro";
import LinkedinIcon from "./icons/Linkedin.astro";
import LionHeadIcon from "./icons/LionHead.astro";

import Route from "./navbar/Route.astro";
import type { RouteDTO } from "../types/RouteDTO";

const ROUTES: RouteDTO[] = [
  { path: "/#hero", label: "hero", icon: LionHeadIcon },
  { path: "/#about-me", label: "about-me", icon: UserIcon },
  { path: "/#experience", label: "experience", icon: BriefcaseIcon },
  // { path: "/#jobs", label: "jobs", icon: CodeIcon },
  { path: "/#contact", label: "contact", icon: MailIcon },
];
const CONTACT_ROUTES: RouteDTO[] = [
  {
    path: "https://github.com/lcasass3",
    label: "github",
    icon: GithubIcon,
    targetBlank: true,
  },
  {
    path: "https://www.linkedin.com/in/leon-casas-187504266/",
    label: "linkedIn",
    icon: LinkedinIcon,
    targetBlank: true,
  },
];
---

<nav
  class="bg-background border-r-primary/80 fixed left-0 flex h-screen w-20 flex-col justify-between border-r py-20"
>
  <ul class="grid w-full justify-center gap-y-16">
    {ROUTES.map((route) => <Route route={route} />)}
  </ul>

  <ul class="bottom-0 grid w-full justify-center gap-y-16">
    {CONTACT_ROUTES.map((route) => <Route route={route} />)}
  </ul>
</nav>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("nav ul li a");

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.querySelector("svg")!.classList.remove("text-text");
              item.querySelector("svg")!.classList.add("text-primary");
            } else {
              item.querySelector("svg")!.classList.remove("text-primary");
              item.querySelector("svg")!.classList.add("text-text");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>
